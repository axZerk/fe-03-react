Introduction and Philosophy behind React Router
    - SSR vs CSR
    - –ü—Ä–æ—Å—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    - BrowserRouter, Route, Link
    - Route component and render prop
    - match, location, history

Nested routes with React Router
    - match.url vs match.path
    - path - The path pattern used to match. Useful for building nested <Route>
    - url - The matched portion of the URL. Useful for building nested <Link>

    console.log(match.path) // /topics/:topicId/:subId
    console.log(match.url) // /topics/react-router/url-parameters

URL Parameters with React Router
    - match.params

Handling 404 pages (catch all routes) with React Router
    - Switch

Pass props to a component rendered by React Router
    <Route
        path='/dashboard'
        component={() => <Dashboard isAuthed={true} />}
    />

    ‚ÄúWhen you use the component props, the router uses React.createElement to
    create a new React element from the given component. That means if you provide
    an inline function to the component attribute, you would create a new component
    every render. This results in the existing component unmounting and the new
    component mounting instead of just updating the existing component.‚Äù

    <Route
        path='/dashboard'
        render={(props) => <Dashboard {...props} isAuthed={true} />}
    />

Programmatically navigate using React Router
    - <Redirect />
    - this.props.history.push('/dashboard')

Query Strings support with React Router
    - https://www.filepicker.io/api/file/3CE0IvNXQkiKAKxxQZES
    - <Route path={`match.path/tweets`} component={Tweets} />

    - query-string
    - queryString.parse(this.props.location.search)

Pass props to React Router's Link component
    <Link to={{
      pathname: '/mangobronson',
      state: {
        text: "qewqweqeqwe"
      }
    }}>Mango Bronson</Link>

    const { fromNotifications } = this.props.location.state

Code Splitting with React Router
    - Split at the route level. üôÇ
    - Split at the component level. üòÉ

	{
    path: '/',
    exact: true,
    component: LoadableComponent({
      loader: () => import(`./Home`),
      loading: Loading
    })
  }

  <Switch location={this.props.location}>
          {routes.map(({ path, exact, component: C }) => (
            <Route key={path} exact={exact} path={path} component={C} />
          ))}
          <Route component={NotFound} />
        </Switch>


Protected routes and authentication/authorization with React Router
    const fakeAuth = {
        isAuthenticated: false,
        authenticate(cb) {
            this.isAuthenticated = true
            setTimeout(cb, 200) // fake async
        },
        signout(cb) {
            this.isAuthenticated = false
            setTimeout(cb, 200) // fake async
        }
    }

    Here are the requirements for our PrivateRoute component.
        - It has the same API as <Route />.
        - It renders a <Route /> and passes all the props through to it.
        - It checks if the user is authenticated, if they are, it renders the ‚Äúcomponent‚Äù prop. If not, it redirects the user to /login.

    // Requirement 1.
    // It has the same API as <Route />

    const PrivateRoute = ({ component: Component, ...rest }) => ()

    // Requirement 2.
    // It renders a <Route /> and passes all the props through to it.

    const PrivateRoute = ({ component: Component, ...rest }) => (
        <Route {...rest} render={} />
    );

    // Requirement 3.
    // It checks if the user is authenticated, if they are,
    // it renders the "component" prop. If not, it redirects
    // the user to /login.

    const PrivateRoute = ({ component: Component, ...rest }) => (
        <Route {...rest} render={(props) => (
            fakeAuth.isAuthenticated === true
            ? <Component {...props} />
            : <Redirect to='/login' />
        )} />
    )



Fixing the "cannot GET *url*" error in React Router

*** –•–∞–∫–∏ –ø–æ–¥ GitHub Pages ***
- homepage –ø–æ–ª–µ –≤ package.json
- basename prop —É BrowserRouter
- https://goo.gl/ZsszQT
